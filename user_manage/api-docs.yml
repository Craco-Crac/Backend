openapi: 3.0.0
info:
  title: User Service API
  version: "1.0"
paths:
  /users/all:
    get:
      tags:
        - Users
      summary: Returns a list of users
      description: Retrieve a list of users from the system
      responses:
        "200":
          description: A JSON array of user objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "500":
          description: Internal server error

  /users/{param}:
    delete:
      tags:
        - Users
      summary: Delete a user by username or email
      description: You can put username or email in the path parameter
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user to delete
      responses:
        "200":
          description: A user object and message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
        "500":
          description: Internal server error
          
  /users/add:
    post:
      tags:
      - Users
      summary: Add a new user
      description: Adds a new user to the system with a username, email, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: supersecurepassword
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  message:
                    type: string
                    example: User added successfully
        '400':
          description: Bad request (missing parameters or invalid email)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password, username and email are required
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username or email already exists
        '500':
          description: An error occurred while adding the user or connecting to the DB
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An error occurred while adding the user

  /users/auth/login:
      post:
        tags:
          - Authentication
        summary: Login user
        description: Allows users to login by providing a username and password. JWT will be saved in user's cookie automaticaly
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: "john_doe"
                  password:
                    type: string
                    example: "12345"
                required:
                  - username
                  - password
        responses:
          '200':
            description: Authenticated
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Authenticated"
                    jwt:
                      type: string
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJqb2huX2RvZSIsImlhdCI6MTUxNjIzOTAyMn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          '401':
            description: Password is incorrect
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Password is incorrect"
          '404':
            description: User not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "User not found"
          '500':
            description: Server error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "An error occurred. Please try again later."

  /users/auth/logout:
    get:
      tags:
        - Authentication
      summary: Logs out the current user
      description: Clears the user's session by removing the `authToken` cookie, effectively logging them out. The cookie is configured with `HttpOnly` and `Secure` flags for enhanced security.
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Logged out successfully'
        '500':
          description: Server error occurred during the logout process
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Error occurred during logout'

  /users/auth/check:
    get:
      tags:
        - Authentication
      summary: Check Authentication Status
      description: Checks if the user is authenticated based on the JWT token provided in cookies.
      operationId: authCheck
      responses:
        '200':
          description: The token is valid, and the user is authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAuthenticated:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized. The token is missing, invalid, or not provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAuthenticated:
                    type: boolean
                    example: false
        '500':
          description: Server error occurred while verifying the token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An error occurred while verifying token.

  /node/send:
    post:
      summary: Send a message
      description: Sends a message to RabbitMQ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  example: "Hello, RabbitMQ!"
      responses:
        "200":
          description: Message successfully sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Message sent to RabbitMQ"
        "400":
          description: Bad request - Message is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Message is required"
        "500":
          description: Internal Server Error - Error sending message to RabbitMQ
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error sending message to RabbitMQ"

components:
  schemas:
    User:
      type: object
      properties:
        password:
          type: string
        username:
          type: string
        email:
          type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
